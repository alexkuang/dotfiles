unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

function! PackInit() abort
    packadd minpac
    call minpac#init()

    " have minpac manage itself
    call minpac#add('k-takata/minpac', {'type': 'opt'})

    call minpac#add('benmills/vimux')
    call minpac#add('catppuccin/vim')
    call minpac#add('chriskempson/base16-vim')
    call minpac#add('dense-analysis/ale')
    call minpac#add('junegunn/fzf.vim')
    call minpac#add('justinmk/vim-sneak')
    call minpac#add('michaeljsmith/vim-indent-object')
    call minpac#add('roman/golden-ratio')
    call minpac#add('tommcdo/vim-exchange')
    call minpac#add('tpope/vim-abolish')
    call minpac#add('tpope/vim-dispatch')
    call minpac#add('tpope/vim-fugitive')
    call minpac#add('tpope/vim-projectionist')
    call minpac#add('tpope/vim-repeat')
    call minpac#add('tpope/vim-surround')
    call minpac#add('vim-airline/vim-airline')
    call minpac#add('wellle/targets.vim')

    call minpac#add('NoahTheDuke/vim-just')
    call minpac#add('derekwyatt/vim-scala')
    call minpac#add('elixir-editors/vim-elixir')
    call minpac#add('jparise/vim-graphql')
    call minpac#add('leafOfTree/vim-svelte-plugin')
    call minpac#add('rust-lang/rust.vim')
endfunction

command! PackUpdate call PackInit() | call minpac#update()
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()

" remove all previous autocommands to help idempotence
autocmd!

set termguicolors

" bit hacky but still maybe slightly better than doing full minpac init
if findfile('pack/minpac/start/vim/colors/catppuccin_mocha.vim', &runtimepath) != ''
    colorscheme catppuccin_mocha
else
    echo "Couldn't find catpuccin color scheme."
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set history=25
set expandtab
set hlsearch
set tabstop=4
set ruler
set softtabstop=4
set shiftwidth=4
set textwidth=120
set mouse= "defaults.vim sets `nvi`, explicitly disable

set nowrap
set autoindent
set fileformats=unix,dos
set fileformat=unix
set ignorecase
set smartcase
set incsearch

set belloff=all

set tags=./ctags,ctags;



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Aesthetic settings for splits, status lines, cursor lines, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set splitright
set splitbelow

" cursorline and such; 233 => basically darkest gray that's noticeable
set cursorline
hi CursorLine ctermfg=NONE ctermbg=NONE cterm=BOLD
" fix semi-transparency even with themes lol
hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE guifg=NONE ctermfg=NONE

set rtp+=$HOMEBREW_PREFIX/opt/fzf
let g:fzf_layout = { 'down': '~40%' }

" code folding, still playing around
set foldmethod=indent
set nofoldenable

" wipe trailing whitespace before saving; let's hope this regex is right!  :D
autocmd BufWritePre * :%s/\s\+$//e

let g:airline_powerline_fonts = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom functions!
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Like VimuxShell, but specific to scala repl
function! VimuxScala()
    call VimuxSendText(":paste")
    call VimuxSendKeys("Enter")
    call VimuxSendText(@v)
    call VimuxSendKeys("Enter")
    call VimuxSendKeys("C-d")
endfunction

" Like VimuxShell, but specific to iex repl
function! VimuxElixir()
    call VimuxSendText("(")
    call VimuxSendKeys("Enter")
    call VimuxSendText(@v)
    call VimuxSendKeys("Enter")
    call VimuxSendText(")")
    call VimuxSendKeys("Enter")
endfunction

function! VimuxShell()
    call VimuxSendText(@v)
    call VimuxSendKeys("Enter")
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" language/plugin-specific configs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on
filetype indent on
filetype plugin on
au BufRead .localrc set filetype=zsh
au BufRead,BufNewFile *.njk set filetype=html "close enough
au BufRead,BufNewFile *.sc set filetype=scala
au BufRead,BufNewFile *.md set filetype=markdown
au BufRead,BufNewFile *.tsx set filetype=typescript.jsx "for some reason it defaults to 'typescriptreact'
au BufRead,BufNewFile Jenkinsfile,*.jenkinsfile set filetype=groovy
autocmd FileType ruby,Gemfile,yaml,javascript,javascriptreact,svelte,astro set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType json set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType python set shiftwidth=4 tabstop=4 softtabstop=4 expandtab
autocmd FileType python let b:dispatch = 'python3 -m unittest'
autocmd FileType html,css,scss set tabstop=2 softtabstop=2 shiftwidth=2 expandtab
autocmd FileType java,xml set smartindent shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType make set noexpandtab shiftwidth=8
autocmd FileType just set smartindent shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType scala set smartindent shiftwidth=2 tabstop=2 softtabstop=2
" use leader-s to switch between class and spec file
autocmd FileType scala nnoremap <leader>s :A<cr>
autocmd FileType scala vnoremap <leader>vs "vy :call VimuxScala()<cr>
autocmd FileType scala let b:dispatch = 'sbt compile'
autocmd FileType elixir let b:dispatch = 'mix test %'
autocmd FileType elixir vnoremap <leader>vs "vy :call VimuxElixir()<cr>
autocmd FileType elixir nnoremap <leader>vr :call VimuxSendText("recompile") \| call VimuxSendKeys("Enter")<cr>
autocmd FileType elixir nnoremap <leader>s :A<cr>
" b/c some sort of drama about file types
" https://github.com/elixir-editors/vim-elixir/issues/562
au BufRead,BufNewFile *.ex,*.exs set filetype=elixir
au BufRead,BufNewFile *.eex,*.heex,*.leex,*.sface,*.lexs set filetype=eelixir
au BufRead,BufNewFile mix.lock set filetype=elixir
autocmd FileType typescript,typescriptreact set smartindent shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript set smartindent shiftwidth=2 tabstop=2 softtabstop=2

" turn off double indents for python
let g:pyindent_open_paren = '&sw'
let g:pyindent_continue = '&sw'

" For scala + clojure
set wildignore+=*/target/**
set wildignore+=*.jar
" For js
set wildignore+=*/node_modules/**

" Silly markdown
let g:vim_markdown_folding_disabled=1

" sorting all the scala imports
let g:scala_sort_across_groups=1
let g:scala_scaladoc_indent=1
let g:scala_first_party_namespaces="io.narrative"

" for some reason have to explicitly enable
let g:vim_svelte_plugin_use_typescript = 1

" all the ale settings
let g:ale_linters = {
\    "elixir": ["elixir-ls"],
\    "eelixir": ["elixir-ls"],
\    "scala": ["metals"],
\    "svelte": ["svelteserver"],
\    "typescript": ["eslint", "tsserver"],
\}

let g:ale_fixers = {
\    "elixir": ["mix_format", "remove_trailing_lines", "trim_whitespace"],
\    "eelixir": ["mix_format", "remove_trailing_lines", "trim_whitespace"],
\    "svelte": ["prettier", "remove_trailing_lines", "trim_whitespace"],
\    "astro": ["eslint", "prettier", "remove_trailing_lines", "trim_whitespace"],
\    "scala": ["scalafmt", "remove_trailing_lines", "trim_whitespace"],
\    "typescript": ["eslint", "prettier", "tslint", "remove_trailing_lines", "trim_whitespace"],
\    "*": ["trim_whitespace", "remove_trailing_lines"],
\}

let g:ale_elixir_elixir_ls_release = expand("~/.elixir-ls/release")
let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1

if !exists('g:projectionist_transformations')
  let g:projectionist_transformations = {}
endif

function! ElixirPostTransform(input, ...) abort
  let l:result = a:input
  let l:result = substitute(l:result, 'Llm', 'LLM', 'g')
  let l:result = substitute(l:result, 'Openai', 'OpenAI', 'g')
  return l:result
endfunction

let g:projectionist_transformations.elixir_post = function('ElixirPostTransform')

let g:projectionist_heuristics = {
\   "tsconfig.json": {
\     "src/*.test.ts": {
\       "type": "test",
\       "alternate": "src/{}.ts"
\     },
\     "src/*.ts": {
\       "type": "source",
\       "alternate": "src/{}.test.ts"
\     },
\     "src/*.stories.tsx": {
\       "type": "story",
\       "alternate": "src/{}.tsx"
\     },
\     "src/*.test.tsx": {
\       "type": "test",
\       "alternate": "src/{}.tsx"
\     },
\     "src/*.tsx": {
\       "type": "source",
\       "alternate": "src/{}.test.tsx"
\     },
\   },
\   "build.sbt": {
\     "src/main/scala/*.scala": {
\       "alternate": "src/test/scala/{}Spec.scala",
\       "type": "source"
\     },
\     "src/test/scala/*Spec.scala": {
\       "alternate": "src/main/scala/{}.scala",
\       "type": "test"
\     }
\   },
\   "mix.exs": {
\     "lib/*.ex": {
\       "alternate": "test/{}_test.exs",
\       "type": "source",
\       "template": [
\         "defmodule {camelcase|capitalize|dot|elixir_post} do",
\         "end"
\       ],
\     },
\     "test/*_test.exs": {
\       "alternate": "lib/{}.ex",
\       "type": "test",
\       "template": [
\         "defmodule {camelcase|capitalize|dot}Test do",
\         "  use ExUnit.Case, async: true",
\         "",
\         "  alias {camelcase|capitalize|dot}",
\         "end"
\       ]
\     },
\     "lib/**/controllers/*_controller.ex": {
\        "type": "controller",
\        "alternate": "test/{dirname}/controllers/{basename}_controller_test.exs",
\        "template": [
\          "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}Controller do",
\          "  use {dirname|camelcase|capitalize}, :controller",
\          "end"
\        ],
\     },
\     "test/**/controllers/*_controller_test.exs": {
\       "alternate": "lib/{dirname}/controllers/{basename}_controller.ex",
\       "type": "test",
\       "template": [
\         "defmodule {dirname|camelcase|capitalize}.{basename|camelcase|capitalize}ControllerTest do",
\         "  use {dirname|camelcase|capitalize}.ConnCase, async: true",
\         "end"
\       ],
\     },
\   }
\ }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General maps and such
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=" "

" expands for current file + directory of current file in cmd mode
cnoremap %% <C-R>=expand('%:h').'/'<CR>
cnoremap %$ <C-R>=expand('%')<CR>

" Easier than hitting esc or C-c
inoremap jk <Esc>

nnoremap <CR> :

nnoremap <leader>t :Dispatch<CR>
" use leader-leader to switch between current and last focused buffer
nnoremap <leader><leader> <c-^>
nnoremap <leader>w :set wrap!<CR>
" Really hacky way to 'temporarily' disable hlsearch, cough cough
nnoremap <leader>hl :nohlsearch<CR>
nnoremap <leader>n :set number!<CR>

nnoremap <C-p> :FZF<CR>

nnoremap <leader>bk :bd<CR>

nnoremap <leader>vo :call VimuxOpenRunner()<CR>
nnoremap <leader>vq :VimuxCloseRunner<CR>
nnoremap <leader>vl :VimuxRunLastCommand<CR>
vnoremap <leader>vs "vy :call VimuxShell()<cr>
vnoremap <leader>vz "vy :call VimuxShell()<cr>

" for machine-specific things
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
