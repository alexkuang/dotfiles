if exists('*minpac#init')
    call minpac#init()

    " have minpac manage itself
    call minpac#add('k-takata/minpac', {'type': 'opt'})

    call minpac#add('vim-jp/syntax-vim-ex')
    call minpac#add('junegunn/fzf.vim')
    call minpac#add('derekwyatt/vim-scala')
    call minpac#add('tpope/vim-dispatch')
    call minpac#add('tpope/vim-surround')
    call minpac#add('tpope/vim-repeat')
    call minpac#add('godlygeek/tabular')
    call minpac#add('tpope/vim-abolish')
    call minpac#add('tpope/vim-commentary')
    call minpac#add('tommcdo/vim-exchange')
    call minpac#add('SirVer/ultisnips')
    call minpac#add('roman/golden-ratio')
    call minpac#add('chriskempson/base16-vim')
    call minpac#add('luochen1990/rainbow')
    call minpac#add('vim-airline/vim-airline')
    call minpac#add('vim-airline/vim-airline-themes')
endif

command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update()
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()

" remove all previous autocommands to help idempotence
autocmd!

silent! colorscheme base16-default-dark

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General settings
" TODO A lot of these settings are pretty naive and from early days, should probably update them lol.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
set history=25
set showmode
set showcmd
set expandtab
set hlsearch
set backspace=2
set tabstop=4
set ruler
set softtabstop=4
set shiftwidth=4
set textwidth=120

set nomodeline
set nowrap
set autoindent
set formatoptions-=u
set fileformats=unix,dos
set fileformat=unix
set fileencodings=ucs-bom,utf-8,default,latin1
set fileencoding=utf-8
set shellslash
set ignorecase
set smartcase
set incsearch

set vb " visual bell so it stops making noise.

set tags=./ctags,ctags;



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Aesthetic settings for splits, status lines, cursor lines, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set splitright
set splitbelow

" cursorline and such; 233 => basically darkest gray that's noticeable
set cursorline
hi CursorLine ctermfg=NONE ctermbg=233 cterm=BOLD

" trying out fzf
set rtp+=/usr/local/opt/fzf

" code folding, still playing around
set foldmethod=indent
set nofoldenable

" wipe trailing whitespace before saving; let's hope this regex is right!  :D
autocmd BufWritePre * :%s/\s\+$//e

let g:rainbow_active = 1

let g:airline_powerline_fonts = 1
au VimEnter * silent! AirlineTheme badwolf


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom functions!
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" If in a spec file, emit class under test; otherwise, emit spec file
" Makes some assumptions about your package structure, and about your cwd, but too lazy to fix.  :P
function! ScalaSpecAlt()
    let current_file = expand("%")
    let new_file = current_file
    let is_spec_file = match(current_file, 'src/test') != -1

    if is_spec_file
        let new_file = substitute(new_file, 'Spec.scala$', '.scala', '')
        let new_file = substitute(new_file, 'src/test', 'src/main', '')
    else
        let new_file = substitute(new_file, '.scala$', 'Spec.scala', '')
        let new_file = substitute(new_file, 'src/main', 'src/test', '')
    endif

    return new_file
endfunction

function! OpenScalaSpecAlt()
    exec ':e ' . ScalaSpecAlt()
endfunction




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" language/plugin-specific configs
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype on
filetype indent on
filetype plugin on
au BufRead,BufNewFile *.md set filetype=markdown
autocmd FileType ruby,Gemfile set shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType html,css set shiftwidth=2 expandtab
autocmd FileType java set smartindent shiftwidth=2 tabstop=2 softtabstop=2 expandtab
autocmd FileType make set noexpandtab shiftwidth=8
autocmd FileType scala set smartindent shiftwidth=2 tabstop=2 softtabstop=2
" use leader-s to switch between class and spec file
autocmd FileType scala nnoremap <leader>s :call OpenScalaSpecAlt()<cr>
autocmd FileType scala let b:dispatch = 'sbt compile'

" For scala + clojure
set wildignore+=*/target/**
set wildignore+=*.jar
" For js
set wildignore+=*/node_modules/**

" Make rvm work in vim; it's because vim doesn't load .zshrc, which rvm relies on for shell magic.
set shell=bash

" Silly markdown
let g:vim_markdown_folding_disabled=1

" UltiSnips config
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"




""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General leader maps and such
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader=" "

" Neat little trick--expands into directory of current file in cmdline mode
cnoremap %% <C-R>=expand('%:h').'/'<CR>

" Easier than hitting esc or C-c
inoremap jk <Esc>

nnoremap <CR> :
nnoremap <C-c> <CR>

nnoremap <leader>t :Dispatch<CR>
nnoremap <leader>v :tabnew ~/.vim/vimrc<CR>
" use leader-leader to switch between current and last focused buffer
nnoremap <leader><leader> <c-^>
nnoremap <leader>w :set wrap!<CR>
" Really hacky way to 'temporarily' disable hlsearch, cough cough
nnoremap <leader>hl :nohlsearch<CR>
nnoremap <leader>n :set number!<CR>

" Tabular maps; a='align'
nnoremap <leader>a= :Tabularize /=><CR>
vnoremap <leader>a= :Tabularize /=><CR>
nnoremap <leader>a- :Tabularize /-><CR>
vnoremap <leader>a- :Tabularize /-><CR>

nnoremap <C-p> :FZF<CR>

nnoremap <leader>bk :bd<CR>
